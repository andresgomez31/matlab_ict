function [x, iter, fx_vals, x_vals] = newtonRaphson(f, df, x0, tol, max_iter)
    x = x0;
    iter = 0;
    fx_vals = [];
    x_vals = [];
    while abs(f(x)) > tol && iter < max_iter
        if df(x) == 0
            error('Derivada nula. El método falla.');
        end
        fx_vals(end+1) = f(x);
        x_vals(end+1) = x;
        x = x - f(x)/df(x);
        iter = iter + 1;
    end
end

f = @(x) sqrt(x).*sin(x/3) - 1;
df = @(x) (sin(x/3)./(2*sqrt(x))) + (sqrt(x)/3).*cos(x/3);

fplot(f, [0, 12])
xlabel('x'); ylabel('f(x)');
title('Gráfica de f(x)');
grid on

% Aproximación inicial visual: x0 = 2
[x_sol, iters, fx_vals, x_vals] = newtonRaphson(f, df, 2, 1e-6, 100);

fprintf('Solución: %.6f\nIteraciones: %d\nf(x): %.6e\n', x_sol, iters, f(x_sol));

% ----------------------------------------------------------------

function [x, iter, errors] = biseccion(f, a, b, tol, max_iter)
    iter = 0;
    errors = [];
    if f(a)*f(b) > 0
        error('No hay cambio de signo en el intervalo.');
    end
    while (b - a)/2 > tol && iter < max_iter
        x = (a + b)/2;
        if f(x) == 0
            break;
        elseif f(a)*f(x) < 0
            b = x;
        else
            a = x;
        end
        iter = iter + 1;
        errors(end+1) = abs(f(x));
    end
    x = (a + b)/2;
end

f = @(x) sqrt(x).*sin(x/3) - 1;
df = @(x) (sin(x/3)./(2*sqrt(x))) + (sqrt(x)/3).*cos(x/3);

% Newton-Raphson
[xn, itn, fn_vals, xn_vals] = newtonRaphson(f, df, 2, 1e-6, 100);

% Bisección
[xb, itb, err_b] = biseccion(f, 1, 4, 1e-6, 100);

% Comparación de errores
figure;
semilogy(1:itb, err_b, 'r-o', 'DisplayName', 'Bisección');
hold on;
semilogy(1:itn, abs(fn_vals), 'b-*', 'DisplayName', 'Newton-Raphson');
xlabel('Iteración');
ylabel('Error |f(x)|');
legend;
grid on;
title('Comparación de Errores: Newton-Raphson vs Bisección');

% ----------------------------------------------------------------

function df = central_diff(f, x0, h)
    df = (f(x0 + h) - f(x0 - h)) / (2*h);
end

h_vals = [0.1, 0.01];

% ----------------------------------------------------------------

f1 = @(x) exp(-x.^2) + 1; x1 = 1;
f2 = @(x) sin(x).*cos(2*x); x2 = pi/5;
f3 = @(x) log(x.^2 + 1); x3 = 0.56;
f4 = @(x) x.^2 - (3/2)*x; x4 = 2;

funcs = {f1, f2, f3, f4};
x0s = [x1, x2, x3, x4];
names = {'f1', 'f2', 'f3', 'f4'};
results = [];

figure;
for i = 1:4
    subplot(2,2,i)
    fplot(funcs{i}, [x0s(i)-2, x0s(i)+2])
    title(['Función ', names{i}])
    xlabel('x')
    ylabel(names{i})
    grid on
    for h = h_vals
        df_val = central_diff(funcs{i}, x0s(i), h);
        results = [results; i, h, df_val];
    end
end

% Mostrar tabla de resultados
fprintf('\nResultados - Derivada numérica:\n');
fprintf('Función\t h\t\t f''(x0)\n');
for i = 1:size(results,1)
    fprintf('%d\t %.2f\t %.6f\n', results(i,1), results(i,2), results(i,3));
end